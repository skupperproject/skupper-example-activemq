title: Accessing an ActiveMQ message broker using Skupper
subtitle: Use public cloud resources to process data from a private message broker
overview: |
  This example is a simple message application that shows how you can
  use Skupper to access an ActiveMQ broker at a remote site without
  exposing it to the public internet.

  It contains two services:

  * An ActiveMQ broker running in a private data center.  The broker
    has a queue named "notifications".

  * An AMQP client running in the public cloud.  It sends 10 messages
    to "notifications" and then receives them back.

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - standard: link_your_namespaces
  - title: Deploy the message broker
    commands:
      private:
        - run: kubectl apply -f broker
  - title: Expose the message broker
    commands:
      private:
        - await: deployment/broker
        - run: skupper expose deployment/broker --port 5672
      public:
        - run: kubectl get services
  - title: Run the client
    commands:
      public:
        - await: service/broker
        - run: kubectl run client --attach --rm --restart Never --image quay.io/skupper/activemq-example-client --env SERVER=broker
  - standard: cleaning_up
    commands:
      private:
        - run: kubectl delete -f broker
        - run: skupper delete
      public:
        - run: skupper delete
